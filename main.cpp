#define UNICODE
#pragma comment(linker,"/opt:nowin98")
#pragma comment(lib,"shlwapi")
#pragma comment(linker,"/opt:nowin98")
#include<shlwapi.h>

TCHAR szClassName[]=TEXT("Window");

BOOL UpdateManifest(LPCTSTR szExeFilePath)
{
	BOOL bRet=FALSE;
	HANDLE hUpdate=BeginUpdateResource(szExeFilePath,0);
	if (hUpdate)
	{
		BYTE szManifest[]={
			0x3C,0x3F,0x78,0x6D,0x6C,0x20,0x76,0x65,0x72,0x73,0x69,0x6F,0x6E,0x3D,0x22,0x31,
			0x2E,0x30,0x22,0x20,0x65,0x6E,0x63,0x6F,0x64,0x69,0x6E,0x67,0x3D,0x22,0x55,0x54,
			0x46,0x2D,0x38,0x22,0x20,0x73,0x74,0x61,0x6E,0x64,0x61,0x6C,0x6F,0x6E,0x65,0x3D,
			0x22,0x79,0x65,0x73,0x22,0x3F,0x3E,0x0D,0x0A,0x3C,0x61,0x73,0x73,0x65,0x6D,0x62,
			0x6C,0x79,0x20,0x78,0x6D,0x6C,0x6E,0x73,0x3D,0x22,0x75,0x72,0x6E,0x3A,0x73,0x63,
			0x68,0x65,0x6D,0x61,0x73,0x2D,0x6D,0x69,0x63,0x72,0x6F,0x73,0x6F,0x66,0x74,0x2D,
			0x63,0x6F,0x6D,0x3A,0x61,0x73,0x6D,0x2E,0x76,0x31,0x22,0x20,0x6D,0x61,0x6E,0x69,
			0x66,0x65,0x73,0x74,0x56,0x65,0x72,0x73,0x69,0x6F,0x6E,0x3D,0x22,0x31,0x2E,0x30,
			0x22,0x3E,0x0D,0x0A,0x3C,0x64,0x65,0x70,0x65,0x6E,0x64,0x65,0x6E,0x63,0x79,0x3E,
			0x0D,0x0A,0x20,0x20,0x20,0x20,0x3C,0x64,0x65,0x70,0x65,0x6E,0x64,0x65,0x6E,0x74,
			0x41,0x73,0x73,0x65,0x6D,0x62,0x6C,0x79,0x3E,0x0D,0x0A,0x20,0x20,0x20,0x20,0x20,
			0x20,0x20,0x20,0x3C,0x61,0x73,0x73,0x65,0x6D,0x62,0x6C,0x79,0x49,0x64,0x65,0x6E,
			0x74,0x69,0x74,0x79,0x0D,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
			0x20,0x20,0x74,0x79,0x70,0x65,0x3D,0x22,0x77,0x69,0x6E,0x33,0x32,0x22,0x0D,0x0A,
			0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6E,0x61,0x6D,0x65,
			0x3D,0x22,0x4D,0x69,0x63,0x72,0x6F,0x73,0x6F,0x66,0x74,0x2E,0x57,0x69,0x6E,0x64,
			0x6F,0x77,0x73,0x2E,0x43,0x6F,0x6D,0x6D,0x6F,0x6E,0x2D,0x43,0x6F,0x6E,0x74,0x72,
			0x6F,0x6C,0x73,0x22,0x0D,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
			0x20,0x20,0x76,0x65,0x72,0x73,0x69,0x6F,0x6E,0x3D,0x22,0x36,0x2E,0x30,0x2E,0x30,
			0x2E,0x30,0x22,0x0D,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
			0x20,0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x6F,0x72,0x41,0x72,0x63,0x68,0x69,0x74,
			0x65,0x63,0x74,0x75,0x72,0x65,0x3D,0x22,0x58,0x38,0x36,0x22,0x0D,0x0A,0x20,0x20,
			0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x75,0x62,0x6C,0x69,0x63,
			0x4B,0x65,0x79,0x54,0x6F,0x6B,0x65,0x6E,0x3D,0x22,0x36,0x35,0x39,0x35,0x62,0x36,
			0x34,0x31,0x34,0x34,0x63,0x63,0x66,0x31,0x64,0x66,0x22,0x0D,0x0A,0x20,0x20,0x20,
			0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6C,0x61,0x6E,0x67,0x75,0x61,0x67,
			0x65,0x3D,0x22,0x2A,0x22,0x0D,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,
			0x3E,0x0D,0x0A,0x20,0x20,0x20,0x20,0x3C,0x2F,0x64,0x65,0x70,0x65,0x6E,0x64,0x65,
			0x6E,0x74,0x41,0x73,0x73,0x65,0x6D,0x62,0x6C,0x79,0x3E,0x0D,0x0A,0x3C,0x2F,0x64,
			0x65,0x70,0x65,0x6E,0x64,0x65,0x6E,0x63,0x79,0x3E,0x0D,0x0A,0x3C,0x2F,0x61,0x73,
			0x73,0x65,0x6D,0x62,0x6C,0x79,0x3E,0x0D,0x0A
			/*
			<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
			<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
			<dependency>
			<dependentAssembly>
			<assemblyIdentity
			type="win32"
			name="Microsoft.Windows.Common-Controls"
			version="6.0.0.0"
			processorArchitecture="X86"
			publicKeyToken="6595b64144ccf1df"
			language="*"
			/>
			</dependentAssembly>
			</dependency>
			</assembly>
			*/
		};
		if(UpdateResource(hUpdate,MAKEINTRESOURCE(24),MAKEINTRESOURCE(1),1041,szManifest,sizeof(szManifest)))
		{
			bRet=TRUE;
		}
		EndUpdateResource(hUpdate,!bRet);
	}
	return bRet;
}


LRESULT CALLBACK WndProc(HWND hWnd,UINT msg,WPARAM wParam,LPARAM lParam)
{
	static HWND hEdit;
	switch(msg)
	{
	case WM_COMMAND:
		switch(LOWORD(wParam))
		{
		case 100:
			{
				TCHAR szExeFilePath[MAX_PATH];
				if(!GetWindowTextLength(hEdit))break;
				GetWindowText(hEdit,szExeFilePath,MAX_PATH);
				if(!PathFileExists(szExeFilePath))break;
				if(UpdateManifest(szExeFilePath))
				{
					MessageBox(hWnd,TEXT("完了しました"),TEXT("確認"),MB_ICONINFORMATION);
				}
			}
			break;
		}
		break;
		case WM_CREATE:
			hEdit=CreateWindowEx(WS_EX_CLIENTEDGE,TEXT("EDIT"),0,WS_VISIBLE|WS_CHILD|ES_AUTOHSCROLL,10,10,512,30,hWnd,0,((LPCREATESTRUCT)lParam)->hInstance,0);
			CreateWindow(TEXT("BUTTON"),TEXT("マニフェストを付加"),WS_VISIBLE|WS_CHILD,10,50,256,30,hWnd,(HMENU)100,((LPCREATESTRUCT)lParam)->hInstance,0);
			break;
		case WM_DESTROY:
			PostQuitMessage(0);
			break;
		default:
			return DefWindowProc(hWnd,msg,wParam,lParam);
	}
	return 0;
}


EXTERN_C void __cdecl WinMainCRTStartup()
{
	MSG msg;
	HINSTANCE hInstance=GetModuleHandle(0);
	WNDCLASS wndclass={CS_HREDRAW|CS_VREDRAW,WndProc,0,0,hInstance,0,LoadCursor(0,IDC_ARROW),(HBRUSH)(COLOR_WINDOW+1),0,szClassName};
	RegisterClass(&wndclass);
	HWND hWnd=CreateWindow(szClassName,TEXT("Window"),WS_OVERLAPPEDWINDOW,CW_USEDEFAULT,0,CW_USEDEFAULT,0,0,0,hInstance,0);
	ShowWindow(hWnd,SW_SHOWDEFAULT);
	UpdateWindow(hWnd);
	while(GetMessage(&msg,0,0,0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	ExitProcess(msg.wParam);
}

#if _DEBUG
void main(){}
#endif